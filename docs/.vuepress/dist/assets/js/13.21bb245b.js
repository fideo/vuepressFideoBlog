(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{210:function(a,e,s){"use strict";s.r(e);var t=s(0),r=Object(t.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"crear-un-repositorio-git-en-servidor-propio"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crear-un-repositorio-git-en-servidor-propio","aria-hidden":"true"}},[a._v("#")]),a._v(" Crear un repositorio git en servidor propio")]),a._v(" "),s("p",[a._v("Para crear un repositorio git en servidor propio hay que seguir algunos pasos muy simples, pero deben hacerse en esta secuencia sin alterar nada.")]),a._v(" "),s("h2",{attrs:{id:"servidor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#servidor","aria-hidden":"true"}},[a._v("#")]),a._v(" Servidor")]),a._v(" "),s("p",[a._v("Primero entramos al "),s("em",[s("strong",[a._v("servidor")])]),a._v(" de la forma que estés habituado, en mi caso uso "),s("a",{attrs:{href:"https://www.putty.org/",target:"_blank"}},[a._v("putty")]),a._v(" si es que estoy desde un escritorio remoto; una vez dentro ejecutamos lo siguiente:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ~\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" repositorio.git\n "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" repositorio.git\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" --bare init\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config core.sharedRepository "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\n")])])]),s("p",[a._v("La primer linea cd ~ nos lleva a la home del usuario, es decir que si el usuario que está logueado es fideo la home sería /home/fideo/ para corroborar esto pueden ejecutar pwd y les mostrará donde están parados luego de ejecutar cd ~ La segunda linea crea un directorio llamado repositorio.git el cual tendrá la información que git necesita para llevar nuestro log de archivos. La tercer linea ingresa al directorio. La cuarta linea le decimos a git inicialize ese directorio como un repositorio git para realizar los pull y push de ese repositorio. La quinta y última linea de esta parte se configura en true la variable core.sharedRepository informandole a git que es un repositorio compartido.")]),a._v(" "),s("h2",{attrs:{id:"local"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#local","aria-hidden":"true"}},[a._v("#")]),a._v(" Local")]),a._v(" "),s("p",[a._v("Una vez terminado lo anterior vamos a la máquina "),s("em",[a._v("local")]),a._v(" donde tenemos el código a subir.")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" repositorio\n "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" repositorio\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" init\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" *\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Initial import"')]),a._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" origin git+ssh://user@server/home/user/git/repositorio.git\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" push origin master\n")])])]),s("p",[a._v("Para poder bajar / clonar con git ese ropositorio solo tenemos que ejecutar este comando")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone git+ssh://user@server/home/user/git/repositorio.git\n")])])]),s("h4",{attrs:{id:"algunas-de-las-cositas-que-pueden-servir-para-usar-al-crear-un-repositorio-git-en-servidor-propio"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#algunas-de-las-cositas-que-pueden-servir-para-usar-al-crear-un-repositorio-git-en-servidor-propio","aria-hidden":"true"}},[a._v("#")]),a._v(" Algunas de las cositas que pueden servir para usar al crear un repositorio git en servidor propio.")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" pull\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" status\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" log archivo\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("diff")]),a._v(" 84de2396c3f0fcdc9994028b5bf5f0005c763496 3c933adaf627bc8a58cfefb62ff0f2d5df640673 archivo\n")])])]),s("p",[a._v("Eliminar archivos")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" archivo\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"borro archivo"')]),a._v(" archivo\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" push\n")])])]),s("p",[a._v("Revertir cambios realizados en un archivo específico el cual no hayamos realizado commit")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout -- "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("file")]),a._v("\n")])])]),s("p",[a._v("Deshacer el último commit no enviado con push `")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reset --hard HEAD~1\n")])])]),s("p",[a._v("Revertir el último cambiado, al que se le ha hecho push")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" push -f origin last_commit:branch\n")])])]),s("p",[a._v("Cambiando de ramas Es posible que tengamos varias ramas por ejemplo production (prod) y master. Si estamos en master y queremos pasar los cambios a production se puede hacer lo siguiente:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" branch origin/prod "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# en caso de no tenerla se crea la rama origin/prod")]),a._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" branch -a "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# comprobar que realmente estamos en master")]),a._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" branch --track prod origin/prod "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# si no lo tenemos ya asocia prod a origin/prod")]),a._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout prod "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# cambiamos a la rama prod")]),a._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge master "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# se merguean los cambios desde master a prod")]),a._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" push "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# se suben los cambios")]),a._v("\n")])])]),s("h2",{attrs:{id:"mas-documentacion-sobre-git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mas-documentacion-sobre-git","aria-hidden":"true"}},[a._v("#")]),a._v(" Mas documentación sobre git")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://git-scm.com/documentation",target:"_blank",rel:"noopener noreferrer"}},[a._v("Documentación oficial"),s("OutboundLink")],1)]),a._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("GitHub"),s("OutboundLink")],1)]),a._v(" "),s("p",[s("router-link",{attrs:{to:"/category/git/"}},[a._v("Mas información sobre git en este sitio")])],1),a._v(" "),s("p",[a._v("Copyright (C) 2017 Federico Mazzei Se permite copiar, distribuir y/o modificar este documento bajo los términos de la GNU Free Documentation License, Version 1.3 o cualquier versión publicada por la Free Software Foundation; sin Secciones Invariantes y sin Textos de Portada o Contraportada. Una copia de la licencia está incluida en "),s("a",{attrs:{href:"https://www.gnu.org/copyleft/fdl.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("GNU Free Documentation License."),s("OutboundLink")],1),a._v(" !")])])}),[],!1,null,null,null);e.default=r.exports}}]);